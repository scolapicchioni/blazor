@page "/photos/delete/{id:int}"

@using PhotoSharingApplication.Shared.Interfaces
@using PhotoSharingApplication.Shared.Entities
@inject IPhotosService photosService
@inject NavigationManager navigationManager

<PageTitle>Delete Photo @photo?.Title</PageTitle>

@if (photo is null) {
    <MudText Typo="Typo.body1">...Loading...</MudText>
} else {
    <MudCard >
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.body1">@photo.Id</MudText>
                <MudText Typo="Typo.body2">@photo.Title</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardMedia Image="@(photo.PhotoFile == null ? "" : $"data:{photo.ImageMimeType};base64,{Convert.ToBase64String(photo.PhotoFile)}")" />
        <MudCardContent>
            <MudText Typo="Typo.body2">@photo.Description</MudText>
            <MudText Typo="Typo.subtitle1">@photo.CreatedDate.ToShortDateString()</MudText>
        </MudCardContent>
        <MudCardActions>
            <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Default" Href="photos/all" />
            <MudIconButton Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Error" OnClick="DeleteConfirm" />
        </MudCardActions>
    </MudCard>
 }

@code {
    [Parameter]
    public int Id { get; set; }

    Photo? photo;

    protected override async Task OnInitializedAsync() {
        photo = await photosService.FindAsync(Id);
    }
    private async Task DeleteConfirm(MouseEventArgs e) {
        await photosService.RemoveAsync(Id);
        navigationManager.NavigateTo("/photos/all");
    }
}