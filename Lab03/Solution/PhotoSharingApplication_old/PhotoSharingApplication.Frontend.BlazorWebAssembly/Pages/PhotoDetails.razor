@using PhotoSharingApplication.Frontend.Core.Interfaces
@using PhotoSharingApplication.Frontend.Core.Entities
@inject IPhotosService photosService

@page "/photos/details/{id:int}"

<PageTitle>Photo Details - @photo?.Title</PageTitle>

<MatH3>Details</MatH3>

@if (photo is null) {
    <p>...Loading...</p>
} else {
        <div class="mat-layout-grid">
        <div class="mat-layout-grid-inner">
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                <MatCard>
                    <div>
                        <MatHeadline6>
                            @photo.Id - @photo.Title
                        </MatHeadline6>
                        <MatSubtitle2>
                            @photo.CreatedDate.ToShortDateString()
                        </MatSubtitle2>
                    </div>
                    <MatCardContent>
                        <MatCardMedia Wide="true" ImageUrl="@(photo.PhotoFile is null ? "" : $"data:{photo.ImageMimeType};base64,{Convert.ToBase64String(photo.PhotoFile)}")" ></MatCardMedia>
                        <MatBody2>
                            @photo.Description
                        </MatBody2>
                    </MatCardContent>
                    <MatCardActions>
                        <MatCardActionButtons>
                            <MatButton Link="@($"photos/update/{photo.Id}")">Update</MatButton>
                            <MatButton Link="@($"photos/delete/{photo.Id}")">Delete</MatButton>
                        </MatCardActionButtons>
                    </MatCardActions>
                </MatCard>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    Photo? photo;

    protected override async Task OnInitializedAsync() {
        photo = await photosService.FindAsync(Id);
    }
}
