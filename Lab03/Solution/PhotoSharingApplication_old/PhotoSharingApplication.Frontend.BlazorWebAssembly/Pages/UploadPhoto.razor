@using PhotoSharingApplication.Frontend.Core.Interfaces
@using PhotoSharingApplication.Frontend.Core.Entities
@inject IPhotosService photosService
@inject NavigationManager navigationManager
@page "/photos/upload"

<PageTitle>Upload Photo</PageTitle>

<div class="mat-layout-grid">
    <div class="mat-layout-grid-inner">
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
            <MatCard>
                <MatH3>Upload Photo</MatH3>
                <MatCardContent>
                    <EditForm Model="@photo" OnValidSubmit="HandleValidSubmit">
                        <p>
                            <MatTextField @bind-Value="photo.Title" Label="Title" FullWidth ></MatTextField> 
                        </p>
                        <p>
                            <MatTextField @bind-Value="photo.Description" Label="Description (optional):" FullWidth></MatTextField>  
                        </p>
                        <p>
                            <MatFileUpload OnChange="HandleMatFileSelected" ></MatFileUpload>
                        </p>
                        <p>
                            <MatButton Type="Submit">Upload</MatButton>
                        </p>
                    </EditForm>
                    <MatCardMedia Wide="true" ImageUrl="@(photo.PhotoFile == null ? "" : $"data:{photo.ImageMimeType};base64,{Convert.ToBase64String(photo.PhotoFile)}")" ></MatCardMedia>
                </MatCardContent>
            </MatCard>
        </div>
    </div>
</div>
@code {
    Photo photo = new Core.Entities.Photo();

    private async Task HandleValidSubmit() {
        await photosService.UploadAsync(photo);
        navigationManager.NavigateTo("/photos/all");
    }
    private async Task HandleMatFileSelected(IMatFileUploadEntry[] files) {
        IMatFileUploadEntry? file = files.FirstOrDefault();
        if(file is null){
            return;
        }
        photo.ImageMimeType = file.Type;

        using (var stream = new System.IO.MemoryStream()) {
            await file.WriteToStreamAsync(stream);
            photo.PhotoFile = stream.ToArray();
        }
    }
}