@page "/photos/update/{id:int}"

@using PhotoSharingApplication.Shared.Interfaces
@using PhotoSharingApplication.Shared.Entities
@inject IPhotosService photosService
@inject NavigationManager navigationManager

<PageTitle>Update Photo @photo?.Title</PageTitle>

@if (photo is null) {
    <MudText Typo="Typo.caption">...Loading...</MudText>
} else {
    <MudCard>
        <MudForm Model="photo">
            <MudCardContent>
                <MudTextField @bind-Value="photo.Title"
                              For="@(() => photo.Title)"
                              Label="Title" />
                <MudTextField @bind-Value="photo.Description"
                              Lines="3"
                              For="@(() => photo.Description)"
                              Label="Description" />
                <MudFileUpload T="IBrowserFile" FilesChanged="HandleFileSelected">
                    <ButtonTemplate>
                        <MudFab HtmlTag="label"
                                Color="Color.Secondary"
                                StartIcon="@Icons.Material.Filled.Image"
                                Label="Load picture"
                                for="@context"/>
                    </ButtonTemplate>
                </MudFileUpload>
                <MudImage Fluid Src="@(photo.PhotoFile == null ? "" : $"data:{photo.ImageMimeType};base64,{Convert.ToBase64String(photo.PhotoFile)}")" Elevation="25" Class="rounded-lg" />
            </MudCardContent>
        </MudForm>
        <MudCardActions>
            <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Filled.FileUpload" OnClick="HandleValidSubmit">Upload</MudIconButton>
        </MudCardActions>
    </MudCard>
}

@code {
    [Parameter]
    public int Id { get; set; }

    Photo? photo;

    protected override async Task OnInitializedAsync() {
        photo = await photosService.FindAsync(Id);
    }

    private async Task HandleValidSubmit() {
        await photosService.UpdateAsync(photo);
        navigationManager.NavigateTo("/photos/all");
    }

    private async Task HandleFileSelected(IBrowserFile args) {
        photo.ImageMimeType = args.ContentType;

        using (var streamReader = new System.IO.MemoryStream()) {
            await args.OpenReadStream().CopyToAsync(streamReader);
            photo.PhotoFile = streamReader.ToArray();
        }
    }
}