@inject ICommentsService CommentsService

<MatH3>Comments</MatH3>

@if (comments is null) {
  <p><em>No Comments for this Photo</em></p>
} else {
  <div class="list-group">
    @foreach (var comment in comments) {
      <CommentComponent CommentItem="comment" ViewMode="CommentComponent.ViewModes.Read" OnUpdate="UpdateComment"  OnDelete="DeleteComment"></CommentComponent>
    }
    <CommentComponent CommentItem="new Comment() {PhotoId = PhotoId}" ViewMode="CommentComponent.ViewModes.Create" OnCreate="CreateComment"></CommentComponent>
  </div>
}

@code {
    [Parameter]
    public int PhotoId { get; set; }

    private List<Comment>? comments;

    protected override async Task OnInitializedAsync() {
        comments = await CommentsService.GetCommentsForPhotoAsync(PhotoId);
    }
    async Task CreateComment(Comment comment) {
        comments.Add(await CommentsService.CreateAsync(comment));
    }

    async Task UpdateComment(Comment comment) {
        comment = await CommentsService.UpdateAsync(comment);
    }

    async Task DeleteComment(Comment comment) {
        await CommentsService.RemoveAsync(comment.Id);
        comments.Remove(comment);
    }
}
