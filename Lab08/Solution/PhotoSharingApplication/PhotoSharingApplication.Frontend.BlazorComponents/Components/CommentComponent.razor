@if (ViewMode == ViewModes.Read) {
  <CommentReadComponent CommentItem="CommentItem" OnEdit="SwitchToEditMode" OnDelete="SwitchToDeleteMode"/>
} else if (ViewMode == ViewModes.Edit) {
    <CommentEditComponent CommentItem="CommentItem" OnSave="ConfirmUpdate" OnCancel="SwitchToReadMode" />
} else if (ViewMode == ViewModes.Delete) {
  <CommentDeleteComponent CommentItem="CommentItem" OnDelete="ConfirmDelete" OnCancel="SwitchToReadMode"/>
} else if (ViewMode == ViewModes.Create) {
  <CommentCreateComponent CommentItem="CommentItem" OnSave="ConfirmCreate"/>
}

@code {
    [Parameter, EditorRequired]
    public Comment CommentItem { get; set; } = default!;

    [Parameter]
    public ViewModes ViewMode { get; set; } = ViewModes.Read;

    [Parameter]
    public EventCallback<Comment> OnUpdate { get; set; }
    [Parameter]
    public EventCallback<Comment> OnDelete { get; set; }
    [Parameter]
    public EventCallback<Comment> OnCreate { get; set; }

    private void SwitchToReadMode() => ViewMode = ViewModes.Read;
    private void SwitchToEditMode() => ViewMode = ViewModes.Edit;
    private void SwitchToDeleteMode() => ViewMode = ViewModes.Delete;

    private async Task ConfirmUpdate(Comment comment) {
        await OnUpdate.InvokeAsync(comment);
        SwitchToReadMode();
    }
    
    private async Task ConfirmDelete(Comment comment) {
        await OnDelete.InvokeAsync(comment);
        SwitchToReadMode();
    }
    
    private async Task ConfirmCreate(Comment comment) {
        await OnCreate.InvokeAsync(comment);
    }

    public enum ViewModes {
        Read, Edit, Delete, Create
    }
}
