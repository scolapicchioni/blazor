@using PhotoSharingApplication.Shared.Entities;
@using PhotoSharingApplication.Shared.Exceptions;
@using PhotoSharingApplication.Shared.Interfaces;
@inject ICommentsService CommentsService
@inject NavigationManager navigationManager


<MudText Typo="Typo.h3">Comments</MudText>

@if (comments is null) {
    <MudText Typo="Typo.body1">No comments for this photo yet</MudText>
} else {
    @foreach (var comment in comments) {
        <CommentComponent CommentItem="comment" ViewMode="CommentComponent.ViewModes.Read" OnUpdate="UpdateComment" OnDelete="DeleteComment"/>
    }
    <AuthorizeView>
        <Authorized>
            <CommentComponent CommentItem="new Comment() {PhotoId = PhotoId}" ViewMode="CommentComponent.ViewModes.Create" OnCreate="CreateComment"/>
        </Authorized>
        <NotAuthorized>
            <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Login" Color="Color.Error" Href="bff/login">Log in to add a comment</MudButton>
        </NotAuthorized>
    </AuthorizeView>
}

@code {
    [Parameter, EditorRequired]
    public int PhotoId { get; set; }

    private List<Comment>? comments = default!;

    protected override async Task OnInitializedAsync() {
        comments = await CommentsService.GetCommentsForPhotoAsync(PhotoId);
    }
    async Task CreateComment(Comment comment) {
        try {
            comments.Add(await CommentsService.CreateAsync(comment));
        } catch (CreateUnauthorizedException<Comment>) {
            navigationManager.NavigateTo("/forbidden");
        }
    }

    async Task UpdateComment(Comment comment) {
        try {
            comment = await CommentsService.UpdateAsync(comment);
        } catch (EditUnauthorizedException<Comment>) {
            navigationManager.NavigateTo("/forbidden");
        }
    }

    async Task DeleteComment(Comment comment) {
        try {
            await CommentsService.RemoveAsync(comment.Id);
            comments.Remove(comment);
        } catch (DeleteUnauthorizedException<Comment>) {
            navigationManager.NavigateTo("/forbidden");
        }
    }
}
