@inject IUserService UserService
@inject IAuthorizationService<Photo> PhotosAuthorizationService
<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.body1">@Photo.Id</MudText>
            <MudText Typo="Typo.body2">@Photo.Title</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardMedia Image="@(Photo.PhotoFile == null ? "" : $"data:{Photo.ImageMimeType};base64,{Convert.ToBase64String(Photo.PhotoFile)}")" Height="250" />
    <MudCardContent>
        <MudText Typo="Typo.body2">@Photo.Description</MudText>
        <MudText Typo="Typo.subtitle1">Uploaded on @Photo.CreatedDate.ToShortDateString() by @Photo.UserName</MudText>
    </MudCardContent>
    <MudCardActions>
        @if (Details)
        {
            <MudIconButton Icon="@Icons.Material.Filled.Photo" Color="Color.Default" Href="@($"photos/details/{Photo.Id}")" />
        }
        @if (Edit && mayEdit) {
            <MudIconButton Icon="@Icons.Material.Filled.PhotoSizeSelectLarge" Color="Color.Default" Href="@($"photos/update/{Photo.Id}")" />
        }
        @if (Delete && mayDelete) {
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Warning" Href="@($"photos/delete/{Photo.Id}")" />
        }
        @if (DeleteConfirm && mayDelete) {
            <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Default" Href="photos/all" />
            <MudIconButton Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Error" OnClick="@(async ()=> await OnDeleteConfirmed.InvokeAsync(Photo.Id))" />
        }
    </MudCardActions>
</MudCard>

@code {
    [Parameter, EditorRequired]
    public Photo Photo { get; set; } = default!;

    [Parameter]
    public bool Details { get; set; }

    [Parameter]
    public bool Edit { get; set; }

    [Parameter]
    public bool Delete { get; set; }

    [Parameter]
    public bool DeleteConfirm { get; set; }

    [Parameter]
    public EventCallback<int> OnDeleteConfirmed { get; set; }

    private bool mayEdit = false;
    private bool mayDelete = false;

    protected override async Task OnInitializedAsync() {
        var User = await UserService.GetUserAsync();
        mayEdit = await PhotosAuthorizationService.ItemMayBeUpdatedAsync(User, Photo);
        mayDelete = await PhotosAuthorizationService.ItemMayBeDeletedAsync(User, Photo);
    }
}
