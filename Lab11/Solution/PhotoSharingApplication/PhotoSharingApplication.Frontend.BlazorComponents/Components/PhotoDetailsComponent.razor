@inject IUserService UserService
@inject IAuthorizationService<Photo> PhotosAuthorizationService

<MatCard>
    <div>
        <MatHeadline6>
            @Photo.Id - @Photo.Title
        </MatHeadline6>
        <MatSubtitle2>
            @Photo.CreatedDate.ToShortDateString() by @Photo.UserName
        </MatSubtitle2>
    </div>
    <MatCardContent>
        <PhotoPictureComponent Photo="Photo"></PhotoPictureComponent>
        <MatBody2>
            @Photo.Description
        </MatBody2>
    </MatCardContent>
    <MatCardActions>
        <MatCardActionButtons>
            @if (Details) {
                <MatButton Link="@($"photos/details/{Photo.Id}")">Details</MatButton>
            }
            @if (Edit && mayEdit) {
                <MatButton Link="@($"photos/update/{Photo.Id}")">Update</MatButton>
            }
            @if (Delete && mayDelete) {
                <MatButton Link="@($"photos/delete/{Photo.Id}")">Delete</MatButton>
            }
            @if (DeleteConfirm  && mayDelete) {
                <MatButton OnClick="@(async()=> await OnDeleteConfirmed.InvokeAsync(Photo.Id))">Confirm Deletion</MatButton>
            }
        </MatCardActionButtons>
    </MatCardActions>
</MatCard>

@code {
    [Parameter]
    public Photo Photo { get; set; }

    [Parameter]
    public bool Details { get; set; }

    [Parameter]
    public bool Edit { get; set; }

    [Parameter]
    public bool Delete { get; set; }

    [Parameter]
    public bool DeleteConfirm { get; set; }

    [Parameter]
    public EventCallback<int> OnDeleteConfirmed { get; set; }

    private bool mayEdit = false;
    private bool mayDelete = false;

    protected override async Task OnInitializedAsync() {
        var User = await UserService.GetUserAsync();
        mayEdit = await PhotosAuthorizationService.ItemMayBeUpdatedAsync(User, Photo);
        mayDelete = await PhotosAuthorizationService.ItemMayBeDeletedAsync(User, Photo);
    }
}