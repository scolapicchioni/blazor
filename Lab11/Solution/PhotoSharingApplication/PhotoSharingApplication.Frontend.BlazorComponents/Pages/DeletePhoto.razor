@page "/photos/delete/{id:int}"

@using PhotoSharingApplication.Shared.Exceptions;
@using PhotoSharingApplication.Shared.Interfaces
@using PhotoSharingApplication.Shared.Entities
@inject IPhotosService photosService
@inject NavigationManager navigationManager

<PageTitle>Delete Photo @photo?.Title</PageTitle>

@if (photo is null) {
    <MudText Typo="Typo.body1">...Loading...</MudText>
} else {
    <PhotoDetailsComponent Photo="photo" DeleteConfirm OnDeleteConfirmed="Delete" />
 }

@code {
    [Parameter]
    public int Id { get; set; }

    Photo? photo;

    protected override async Task OnInitializedAsync() {
        photo = await photosService.FindAsync(Id);
    }
    private async Task Delete(int id) {
        try {
            await photosService.RemoveAsync(id);
            navigationManager.NavigateTo("/photos/all");
        } catch (DeleteUnauthorizedException<Photo>) {
            navigationManager.NavigateTo("/forbidden");
        }
    }
}