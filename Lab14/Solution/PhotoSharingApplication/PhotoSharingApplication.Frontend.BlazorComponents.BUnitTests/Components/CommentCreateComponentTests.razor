@using FluentValidation
@using FluentValidation.Results
@inherits CommentCreateComponentTestsBase
<h3>CommentCreateComponentTests</h3>

@code {
    [Fact]
    public void ShouldInvokeSaveOnSubmit_WhenModelIsValid() {
        //Arrange
        validationMock
            .Setup(cv => cv.ValidateAsync(It.IsAny<IValidationContext>(), It.IsAny<System.Threading.CancellationToken>()))
            .ReturnsAsync(new ValidationResult());
        var cut = Render(@<CommentCreateComponent CommentItem="comment" OnSave="Save"></CommentCreateComponent>);

        //Act
        cut.Find("form").Submit();

        //Assert
        Assert.True(saveInvoked);
        Assert.Equal(comment, actual);
    }
    [Fact]
    public void ShouldNotInvokeSaveOnSubmit_WhenModelIsNotValid() {
        //Arrange
        validationMock
            .Setup(cv => cv.ValidateAsync(It.IsAny<IValidationContext>(), It.IsAny<System.Threading.CancellationToken>()))
            .ReturnsAsync(new ValidationResult(new List<ValidationFailure>() {
                new ValidationFailure("Subject","Too long!"),
                new ValidationFailure("Body","Too mean!")
            }));

        var cut = Render(@<CommentCreateComponent CommentItem="comment" OnSave="Save"></CommentCreateComponent>);

        //Act
        cut.Find("form").Submit();

        //Assert
        Assert.False(saveInvoked);
    }
}
