@inherits PhotoDetailsComponentTestsBase

<h3>PhotoDetailsComponentTests</h3>

@code {
    [Fact]
    public void ShouldRenderH6WithPhotoIdAndTitle() {
        // Arrange
        photo.Id = 1;
        photo.Title = "Photo Title";

        // Act
        var cut = Render(@<PhotoDetailsComponent Photo="photo" />);
        var h6 = cut.FindComponent<MatHeadline6>().Find("h6").TextContent;

        //Assert
        h6.MarkupMatches("1 - Photo Title");
    }

    [Fact]
    public void ShouldSetPhotoOfPhotoPicture() {
        var cut = Render(@<PhotoDetailsComponent Photo="photo"></PhotoDetailsComponent>);
        var photoPictureComponent = cut.FindComponent<PhotoPictureComponent>();
        Assert.Equal(photo, photoPictureComponent.Instance.Photo);
    }

    [Fact]
    public void ShouldNotRenderDetailsButton_WhenDetailsPropertyNotSet() {
        var cut = Render(@<PhotoDetailsComponent Photo="photo"></PhotoDetailsComponent>);
        var renderedButtons = cut.FindComponents<MatButton>();
        Assert.DoesNotContain(renderedButtons, rb => rb.Find("button").TextContent.Contains("Details"));
    }

    [Fact]
    public void ShouldRenderDetailsButton_WhenDetailsPropertyIsSet() {
        JSInterop.Mode = JSRuntimeMode.Loose;
        var cut = Render(@<PhotoDetailsComponent Photo="photo" Details></PhotoDetailsComponent>);
        var renderedButtons = cut.FindComponents<MatButton>();
        Assert.Contains(renderedButtons, rb => rb.Find("button").TextContent.Contains("Details"));
    }

    [Fact]
    public void ShouldRenderDetailsButtonWithLinkSetToPhotoId() {
        photo.Id = 1;
        JSInterop.Mode = JSRuntimeMode.Loose;
        var cut = Render(@<PhotoDetailsComponent Photo="photo" Details></PhotoDetailsComponent>);
        var detailsButton = cut.FindComponent<MatButton>();
        Assert.Equal("photos/details/1", detailsButton.Instance.Link);
    }

    [Fact]
    public void ShouldNotRenderDeleteButton_WhenUserNotAuthorized_AndDeletePropertyNotSet() {
        UserIsAuthorized(false);
        var cut = Render(@<PhotoDetailsComponent Photo="photo"></PhotoDetailsComponent>);
        var renderedButtons = cut.FindComponents<MatButton>();
        Assert.DoesNotContain(renderedButtons, rb => rb.Find("button").TextContent.Contains("Delete"));
    }
    [Fact]
    public void ShouldNotRenderDeleteButton_WhenUserNotAuthorized_AndDeletePropertyIsSet() {
        UserIsAuthorized(false);
        var cut = Render(@<PhotoDetailsComponent Photo="photo" Delete></PhotoDetailsComponent>);
        var renderedButtons = cut.FindComponents<MatButton>();
        Assert.DoesNotContain(renderedButtons, rb => rb.Find("button").TextContent.Contains("Delete"));
    }
    [Fact]
    public void ShouldNotRenderDeleteButton_WhenUserAuthorized_AndDeletePropertyNotSet() {
        UserIsAuthorized(true);
        var cut = Render(@<PhotoDetailsComponent Photo="photo"></PhotoDetailsComponent>);
        var renderedButtons = cut.FindComponents<MatButton>();
        Assert.DoesNotContain(renderedButtons, rb => rb.Find("button").TextContent.Contains("Delete"));
    }
    [Fact]
    public void ShouldRenderDeleteButton_WhenUserAuthorized_AndDeletePropertyIsSet() {
        UserIsAuthorized(true);
        JSInterop.Mode = JSRuntimeMode.Loose;
        var cut = Render(@<PhotoDetailsComponent Photo="photo" Delete></PhotoDetailsComponent>);
        var renderedButtons = cut.FindComponents<MatButton>();
        Assert.Contains(renderedButtons, rb => rb.Find("button").TextContent.Contains("Delete"));
    }
}
