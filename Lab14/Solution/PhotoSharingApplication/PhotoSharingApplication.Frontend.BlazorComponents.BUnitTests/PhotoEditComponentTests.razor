@inherits TestContext
@using FluentValidation
@using PhotoSharingApplication.Shared.Core.Entities
@code {
    //TODO: How do I test that the Photo.PhotoImage.PhotoFile has been set?
    [Fact]
    public async Task PhotoImageShouldBeSet_WhenFileUploadChanges() {
        var photo = new PhotoSharingApplication.Shared.Core.Entities.Photo();

        var fileMock = new Mock<IMatFileUploadEntry>();
        string filetype = "img";
        fileMock.SetupGet(f => f.Type).Returns(filetype);

        JSInterop.Mode = JSRuntimeMode.Loose;

        var cut = Render(@<PhotoEditComponent Photo="photo"></PhotoEditComponent>);

        var fileUpload = cut.FindComponent<MatFileUpload>();

        // Act
        await cut.InvokeAsync(() => fileUpload.Instance.OnChange.InvokeAsync(new IMatFileUploadEntry[] { fileMock.Object }));

        //Assert
        fileMock.Verify(f => f.WriteToStreamAsync(It.IsAny<System.IO.MemoryStream>()));
        Assert.Equal(filetype, photo.PhotoImage.ImageMimeType);
    }

    [Fact]
    public void ShouldNotInvokeOnSave_WhenPhotoInvalidValidSubmit() {
        bool uploadInvoked = false;
        Action<Photo> Upload = p => {
        uploadInvoked = true;
        };

        var photo = new PhotoSharingApplication.Shared.Core.Entities.Photo();

        JSInterop.Mode = JSRuntimeMode.Loose;

        var photoErrors = new ValidationResult(new List<ValidationFailure>() {
            new ValidationFailure("Title","Too long!")
        });

        Mock<IValidator<Photo>> photoValidatorMock = new Mock<IValidator<Photo>>();
        photoValidatorMock.Setup(cv => cv.ValidateAsync(It.IsAny<IValidationContext>(), It.IsAny<System.Threading.CancellationToken>())).ReturnsAsync(photoErrors);
        Services.AddSingleton<IValidator<Photo>>(photoValidatorMock.Object);

        var cut = Render(@<PhotoEditComponent Photo="photo" OnSave="Upload"></PhotoEditComponent>);

        cut.Find("form").Submit();

        //Assert
        Assert.False(uploadInvoked);

    }


    [Fact]
    public void ShouldInvokeOnSave_WhenValidSubmit() {
        bool uploadInvoked = false;
        Photo actual = null;
        Action<Photo> Upload = p => {
            uploadInvoked = true;
            actual = p;
        };

        var photo = new PhotoSharingApplication.Shared.Core.Entities.Photo();

        JSInterop.Mode = JSRuntimeMode.Loose;

        var errors = new ValidationResult();

        Mock<IValidator<Photo>> mock = new Mock<IValidator<Photo>>();
        mock.Setup(cv => cv.ValidateAsync(It.IsAny<IValidationContext>(), It.IsAny<System.Threading.CancellationToken>())).ReturnsAsync(errors);
        Services.AddSingleton<IValidator<Photo>>(mock.Object);

        var cut = Render(@<PhotoEditComponent Photo="photo" OnSave="Upload"></PhotoEditComponent>);

        cut.Find("form").Submit();

        //Assert
        Assert.True(uploadInvoked);
        Assert.Equal(photo, actual);
    }
}
