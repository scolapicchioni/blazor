@using PhotoSharingApplication.Shared.Validators;

@inject CoordinatesJsInterop coordsInterop

<MudCard>
    <MudForm Model="Photo" @ref="@form" Validation="@(photoValidator.ValidateValue)">
        <MudCardContent>
            <MudTextField @bind-Value="Photo.Title"
                          For="@(() => Photo.Title)"
                          Label="Title" />
            <MudTextField @bind-Value="Photo.Description"
                          Lines="3"
                          For="@(() => Photo.Description)"
                          Label="Description" />
            <MudFileUpload T="IBrowserFile" FilesChanged="HandleFileSelected">
                <ButtonTemplate>
                    <MudFab HtmlTag="label"
                            Color="Color.Secondary"
                            StartIcon="@Icons.Material.Filled.Image"
                            Label="Load picture"
                            for="@context" />
                </ButtonTemplate>
            </MudFileUpload>
            <MudImage Fluid Src="@(Photo.PhotoImage?.PhotoFile is null ? "" : $"data:{Photo.PhotoImage.ImageMimeType};base64,{Convert.ToBase64String(Photo.PhotoImage.PhotoFile)}")" Elevation="25" Class="rounded-lg" />
        </MudCardContent>
    </MudForm>
    <MudCardActions>
        <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Filled.FileUpload" OnClick="ValidateAndSubmit">Upload</MudIconButton>
    </MudCardActions>
</MudCard>

@code {
    [Parameter, EditorRequired]
    public Photo Photo { get; set; } = default!;

    [Parameter]
    public EventCallback<Photo> OnSave { get; set; }

    private MudForm form;
    private readonly PhotoValidator photoValidator = new PhotoValidator();

    private async Task HandleFileSelected(IBrowserFile args) {
        if (Photo.PhotoImage is null) Photo.PhotoImage = new PhotoImage();
        Photo.PhotoImage.ImageMimeType = args.ContentType;

        using (var streamReader = new System.IO.MemoryStream()) {
            await args.OpenReadStream().CopyToAsync(streamReader);
            Photo.PhotoImage.PhotoFile = streamReader.ToArray();
        }
        await coordsInterop.ExtractCoords(Photo.PhotoImage.PhotoFile, Photo.PhotoImage.ImageMimeType, UpdatePhotoCoords);
    }

    public void UpdatePhotoCoords(double latitude, double longitude) {
        Photo.Latitude = latitude;
        Photo.Longitude = longitude;
    }

    private async Task ValidateAndSubmit() {
        await form.Validate();
        if(form.IsValid) {
            await OnSave.InvokeAsync(Photo);
        }
    }
}
