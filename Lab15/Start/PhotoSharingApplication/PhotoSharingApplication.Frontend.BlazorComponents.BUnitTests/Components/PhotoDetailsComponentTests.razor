@using System.Security.Claims;
@inherits PhotoDetailsComponentTestsBase

@code {
    [Fact]
    public void PhotoDetailsComponentRendersIdAndTitleInCardHeader() {
        //Act
        var cut = Render(@<PhotoDetailsComponent Photo="photo" />);

        // Assert
        cut.Find("div.mud-card-header-content").MarkupMatches(
            @<div class="mud-card-header-content">
                <p class="mud-typography mud-typography-body1">@photo.Id</p>
                <p class="mud-typography mud-typography-body2">@photo.Title</p>
            </div>
        );
    }

    [Fact]
    public void PhotoDetailsComponentRendersDescriptionCreatedDateAndUserName() {
        // Act
        var cut = RenderComponent<PhotoDetailsComponent>(parameters => parameters
            .Add(p => p.Photo, photo));

        var mudTextFields = cut.FindComponent<MudCardContent>().FindComponents<MudText>();

        // Assert
        mudTextFields.Count.Should().Be(2);
        mudTextFields[0].Find("p").TextContent.Should().Be(photo.Description);
        mudTextFields[1].MarkupMatches(@<h6 diff:ignoreAttributes>Uploaded on @photo.CreatedDate.ToShortDateString() by @photo.UserName</h6>);
    }

    [Fact]
    public void PhotoDetailsComponentShouldNotRenderDeleteButton_WhenDetailsPropertyNotSet() {
        //Act
        var cut = Render(@<PhotoDetailsComponent Photo=photo/>);

        //Assert
        var buttons = cut.FindComponents<MudIconButton>();
        buttons.FirstOrDefault(b => b.Instance.Icon == Icons.Material.Filled.Delete).Should().BeNull();
    }

    [Fact]
    public void PhotoDetailsComponentShouldRenderDeleteButton_WhenDeletePropertyIsSetAndUserIsAuthorized() {
        //Arrange
        mockAuthorizationService.Setup(a => a.ItemMayBeDeletedAsync(It.IsAny<ClaimsPrincipal>(), photo)).ReturnsAsync(true);

        //Act
        var cut = Render(@<PhotoDetailsComponent Photo=photo Delete/>);

        //Assert
        var buttons = cut.FindComponents<MudIconButton>();
        buttons.Count(b => b.Instance.Icon == Icons.Material.Filled.Delete).Should().Be(1);
        buttons.Count(b => b.Instance.Href == "photos/delete/1").Should().Be(1);
    }

    [Fact]
    public void PhotoDetailsComponentShouldNotRenderDeleteButton_WhenDeletePropertyIsSetAndUserIsNotAuthorized() {
        //Arrange
        mockAuthorizationService.Setup(a => a.ItemMayBeDeletedAsync(It.IsAny<ClaimsPrincipal>(), photo)).ReturnsAsync(false);

        //Act
        var cut = Render(@<PhotoDetailsComponent Photo=photo Delete />);

        //Assert
        var buttons = cut.FindComponents<MudIconButton>();
        buttons.FirstOrDefault(b => b.Instance.Icon == Icons.Material.Filled.Delete).Should().BeNull();
    }

    [Fact]
    public async Task DeleteForeverInvokesOnDeleteConfirmed() {
        //Arrange
        mockAuthorizationService.Setup(a => a.ItemMayBeDeletedAsync(It.IsAny<ClaimsPrincipal>(), photo)).ReturnsAsync(true);

        int actualPhotoId = 0;
        Action<int> eventHandler = photoId => actualPhotoId = photoId;
        
        //Act
        var cut = Render(@<PhotoDetailsComponent Photo=photo DeleteConfirm OnDeleteConfirmed="eventHandler" />);

        var deleteButton = cut.FindComponents<MudIconButton>().First(b => b.Instance.Icon == Icons.Material.Filled.DeleteForever).Instance;
        await cut.InvokeAsync(async() => await deleteButton.OnClick.InvokeAsync(null));

        actualPhotoId.Should().Be(photo.Id);
    }
}
