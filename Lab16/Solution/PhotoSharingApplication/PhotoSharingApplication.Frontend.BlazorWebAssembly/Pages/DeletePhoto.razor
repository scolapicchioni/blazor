@page "/photos/delete/{id:int}"
@using PhotoSharingApplication.Shared.Core.Exceptions
@inject IPhotosService photosService
@inject NavigationManager navigationManager

<MatH3>Delete</MatH3>

@if (photo == null) {
    <p>...Loading...</p>
} else {
    <div class="mat-layout-grid">
        <div class="mat-layout-grid-inner">
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                <PhotoDetailsComponent Photo="photo" DeleteConfirm OnDeleteConfirmed="Delete"></PhotoDetailsComponent>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    Photo photo;

    protected override async Task OnInitializedAsync() {
        photo = await photosService.FindAsync(Id);
    }
    private async Task Delete(int id) {
        try {
            await photosService.RemoveAsync(id);
            navigationManager.NavigateTo("/photos/all");
        } catch (UnauthorizedDeleteAttemptException<Photo>) {
            navigationManager.NavigateTo("/forbidden");
        }
    }
}