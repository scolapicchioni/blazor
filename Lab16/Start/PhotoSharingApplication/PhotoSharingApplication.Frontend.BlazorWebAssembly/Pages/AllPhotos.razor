@inject IPhotosService photosService

@page "/photos/all"

<AuthorizeView>
    <Authorized>
        <MatButton Link="photos/upload">Upload new Photo</MatButton>
    </Authorized>
    <NotAuthorized>
        <MatButton Link="authentication/login">Log In to Upload a Photo</MatButton>
    </NotAuthorized>
</AuthorizeView>


<div class="mat-layout-grid">
    <div class="mat-layout-grid-inner">
        <Virtualize @ref="virtualizecomponent" Context="photo" ItemsProvider="@LoadPhotos">
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
                <PhotoDetailsComponent Photo="photo" Details Edit Delete></PhotoDetailsComponent>
            </div>
        </Virtualize>
    </div>
</div>


@code {
    Virtualize<Photo> virtualizecomponent;

    int totalNumberOfPhotos;
    protected override async Task OnInitializedAsync() {
        totalNumberOfPhotos = await photosService.GetPhotosCountAsync();
        await virtualizecomponent.RefreshDataAsync();
    }

    private async ValueTask<ItemsProviderResult<Photo>> LoadPhotos(ItemsProviderRequest request) {
        var numberOfPhotos = Math.Min(request.Count, totalNumberOfPhotos - request.StartIndex);
        try {
            var photos = await photosService.GetPhotosAsync(request.StartIndex, numberOfPhotos, request.CancellationToken);

            return new ItemsProviderResult<Photo>(photos, totalNumberOfPhotos);
        } catch {
            return new ItemsProviderResult<Photo>(null, 0);
        }
    }
}
